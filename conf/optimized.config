// ════════════════════════════════════════════════════════════════════════════
/* Optimized Configuration - Maximum Performance Profile */
// ════════════════════════════════════════════════════════════════════════════
// This profile extends the dynamic base.config with more aggressive resource 
// allocation for maximum performance on dedicated compute systems.
// 
// Usage: nextflow run main.nf -profile docker,optimized
// 
// ⚠️  WARNING: This profile uses 80-90% of system resources and may impact
//     system responsiveness. Only use on dedicated compute systems.

// Override params.advanced to push resource allocation higher
params {
  advanced {
    // Alignment: Most aggressive allocation for fastest processing
    align_cpus = { Math.max(8, fitCpus(0.8d)) }   // 80% of CPUs
    align_mem  = { fitMemory(0.8, task.attempt ?: 1) }  // 80% of RAM with scaling
    align_time = '36h'  // Extended timeout for large datasets
    
    // Track generation: Enhanced parallel processing
    tracks_cpus = { Math.max(6, fitCpus(0.6d)) }  // 60% of CPUs
    tracks_mem  = { fitMemory(0.5, task.attempt ?: 1) }  // 50% of RAM with scaling
    tracks_time = '18h'
    
    // Normalization: High memory allocation for BigWig conversion
    norm_cpus = { Math.max(8, fitCpus(0.6d)) }    // 60% of CPUs 
    norm_mem  = { fitMemory(0.7, task.attempt ?: 1) }   // 70% of RAM with scaling
    norm_time = '18h'
    
    // Divergent detection: Enhanced Python processing
    divergent_cpus = { Math.max(6, fitCpus(0.7d)) }  // 70% of CPUs
    divergent_mem  = { fitMemory(0.8, task.attempt ?: 1) }  // 80% of RAM with scaling
    divergent_time = '18h'
    
    // Index building: High memory for large genomes
    index_cpus = { fitCpus(0.6d) }               // 60% of CPUs
    index_mem  = { fitMemory(0.5, task.attempt ?: 1) }  // 50% of RAM with scaling
    index_time = '48h'
  }
}

process {
  // Enhanced divergent detection concurrency
  withName: /(?i).*detect_divergent_tx.*/ {
    maxForks = 2  // Allow 2 concurrent divergent detection tasks
  }
}

// Enhanced environment variables for better performance
env {
  // Threading optimization
  OMP_NUM_THREADS = '${task.cpus}'
  OPENBLAS_NUM_THREADS = '${task.cpus}'
  MKL_NUM_THREADS = '${task.cpus}'
  
  // Tool-specific threading
  BOWTIE2_THREADS = '${task.cpus}'
  SAMTOOLS_THREADS = '${task.cpus}'
  BEDTOOLS_THREADS = '${task.cpus}'
  
  // Memory optimization
  JAVA_OPTS = '-Xmx${task.memory.replaceAll("\\s+GB", "000m")} -XX:+UseG1GC -XX:+UseStringDeduplication'
  
  // I/O optimization
  TMPDIR = '/tmp'
  
  // Python optimization
  PYTHONUNBUFFERED = '1'
  PYTHONDONTWRITEBYTECODE = '1'
}

// Enhanced executor settings for better resource utilization
executor {
  queueSize = Math.max(20, Math.min(100, (int)(params.host_cpus * 8)))
  submitRateLimit = null
  pollInterval = '5s'
}
