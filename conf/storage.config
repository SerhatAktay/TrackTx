// ════════════════════════════════════════════════════════════════════════════
/* Storage Configuration - Shared storage and scratch space management */
// ════════════════════════════════════════════════════════════════════════════

// Storage configuration for different deployment environments
params {
  // Storage paths (customize for your environment)
  storage {
    // Shared storage locations
    shared_data = "${params.storage?.shared_data ?: '/shared/data'}"
    shared_scratch = "${params.storage?.shared_scratch ?: '/scratch'}"
    shared_tmp = "${params.storage?.shared_tmp ?: '/tmp'}"
    
    // Project-specific directories
    project_dir = "${params.storage?.project_dir ?: '/shared/projects/tracktx'}"
    user_scratch = "${params.storage?.user_scratch ?: '/scratch/\$USER'}"
    user_tmp = "${params.storage?.user_tmp ?: '/tmp/\$USER'}"
    
    // Cache and asset directories
    cache_root = "${params.storage?.cache_root ?: '/shared/cache'}"
    assets_root = "${params.storage?.assets_root ?: '/shared/assets'}"
  }
  
  // Work directory configuration
  work_dir = "${params.work_dir ?: params.storage?.user_scratch + '/nextflow-work'}"
  
  // Output directory (should be on shared storage)
  output_dir = "${params.output_dir ?: params.storage?.project_dir + '/results'}"
  
  // Asset and genome caching
  assets_dir = "${params.assets_dir ?: params.storage?.assets_root + '/tracktx'}"
  genome_cache = "${params.genome_cache ?: params.storage?.cache_root + '/genomes'}"
}

// Storage-aware process configuration
process {
  // Use scratch space for temporary files
  scratch = true
  
  // Clean up after processes
  cleanup = true
  
  // Storage optimization script
  beforeScript = '''
    # Create necessary directories
    mkdir -p "${params.storage?.user_scratch}/nextflow-work"
    mkdir -p "${params.storage?.user_tmp}"
    mkdir -p "${params.work_dir}"
    
    # Set up scratch space
    export TMPDIR="${params.storage?.user_tmp}"
    export SCRATCH_DIR="${params.storage?.user_scratch}"
    
    # Ensure scratch space is writable
    if [[ ! -w "${TMPDIR}" ]]; then
      echo "WARNING: TMPDIR ${TMPDIR} is not writable, falling back to /tmp"
      export TMPDIR="/tmp"
    fi
    
    if [[ ! -w "${SCRATCH_DIR}" ]]; then
      echo "WARNING: SCRATCH_DIR ${SCRATCH_DIR} is not writable"
    fi
  '''
  
  // Storage cleanup script
  afterScript = '''
    # Clean up large temporary files
    find "${TMPDIR}" -name "*.tmp" -mtime +1 -delete 2>/dev/null || true
    find "${TMPDIR}" -name "*.temp" -mtime +1 -delete 2>/dev/null || true
    
    # Clean up old work directories (older than 7 days)
    find "${params.work_dir}" -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
  '''
}

// Storage-specific process overrides
process {
  // Memory-intensive processes should use scratch space
  withName: /(?i).*fetch_and_build_index.*/ {
    scratch = true
    cleanup = true
  }
  
  withName: /(?i).*run_alignment.*/ {
    scratch = true
    cleanup = true
  }
  
  // Track generation processes
  withName: /(?i).*generate_tracks.*/ {
    scratch = true
    cleanup = true
  }
  
  withName: /(?i).*normalize_tracks.*/ {
    scratch = true
    cleanup = true
  }
}

// Storage validation
if (params.storage) {
  // Validate storage paths
  def storagePaths = [
    params.storage.shared_data,
    params.storage.shared_scratch,
    params.storage.project_dir,
    params.storage.cache_root,
    params.storage.assets_root
  ]
  
  storagePaths.each { path ->
    if (path && !new File(path).exists()) {
      log.warn "Storage path does not exist: ${path}"
    }
  }
}
