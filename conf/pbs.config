// ════════════════════════════════════════════════════════════════════════════
/* PBS Configuration - Optimized for PBS/Torque-based HPC clusters */
// ════════════════════════════════════════════════════════════════════════════

// Include shared HPC settings
includeConfig 'conf/hpc.config'

process {
  executor = 'pbs'
  
  // PBS-specific settings
  queue = "${params.pbs_queue ?: 'batch'}"
  clusterOptions = [
    '-N tracktx-{hash}',
    '-o logs/pbs-%j.out',
    '-e logs/pbs-%j.err',
    '-l walltime={task.time}',
    '-l nodes=1:ppn={task.cpus}',
    '-l mem={task.memory}',
    '-V',  // Pass environment variables
    '-j oe', // Merge stdout/stderr
  ]
  
  // PBS resource mapping
  cpus   = { task.cpus }
  memory = { task.memory }
  time   = { task.time }
}

// PBS executor configuration
executor {
  name = 'pbs'
  queueSize = 100
  submitRateLimit = '10/1min'
  
  // PBS-specific options
  queueStatCommand = 'qstat -u $USER'
  killCommand = 'qdel'
  
  // Job monitoring
  pollInterval = '30s'
  
  // Cleanup
  cleanup = true
}

// PBS-specific process overrides
process {
  // Override cluster options for specific processes if needed
  withName: /(?i).*fetch_and_build_index.*/ {
    clusterOptions = [
      '-N tracktx-index-{hash}',
      '-o logs/pbs-%j.out',
      '-e logs/pbs-%j.err',
      '-l walltime=72:00:00',
      '-l nodes=1:ppn=16',
      '-l mem=64gb',
      '-V',
      '-j oe',
    ]
  }
  
  withName: /(?i).*run_alignment.*/ {
    clusterOptions = [
      '-N tracktx-align-{hash}',
      '-o logs/pbs-%j.out',
      '-e logs/pbs-%j.err',
      '-l walltime=48:00:00',
      '-l nodes=1:ppn=12',
      '-l mem=48gb',
      '-V',
      '-j oe',
    ]
  }
}

// PBS environment setup
params {
  // PBS-specific paths
  pbs_logs_dir = "${params.pbs_logs_dir ?: 'logs'}"
  
  // Common PBS queues (customize for your cluster)
  pbs_queue = "${params.pbs_queue ?: 'batch'}"
  
  // PBS resource limits
  max_jobs = "${params.max_jobs ?: 50}"
  max_ppn_per_job = "${params.max_ppn_per_job ?: 32}"
}

// Create logs directory if it doesn't exist
if (!new File(params.pbs_logs_dir).exists()) {
  new File(params.pbs_logs_dir).mkdirs()
}
